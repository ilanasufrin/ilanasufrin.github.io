<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ilana's Blog]]></title>
  <link href="http://ilanasufrin.github.io/atom.xml" rel="self"/>
  <link href="http://ilanasufrin.github.io/"/>
  <updated>2014-08-31T16:33:02-04:00</updated>
  <id>http://ilanasufrin.github.io/</id>
  <author>
    <name><![CDATA[Ilana Sufrin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Rails Grammar Lesson]]></title>
    <link href="http://ilanasufrin.github.io/blog/2014/08/31/a-rails-grammar-lesson/"/>
    <updated>2014-08-31T16:26:48-04:00</updated>
    <id>http://ilanasufrin.github.io/blog/2014/08/31/a-rails-grammar-lesson</id>
    <content type="html"><![CDATA[<p>Since I first started learning Rails, one thing that struck me was how incredibly smart the framework is. Not just in anticipating paths and RESTful patterns, but also how class <code>Person</code> magically becomes table <code>People</code> in the database. How in the world does Rails know that it&rsquo;s not the <code>Persons</code> controller/table? Has somebody hardcoded every possible grammar edge case? I made it my mission to find out.</p>

<p>As <a href="http://underpop.free.fr/r/ruby-on-rails/cookbook/I_0596527314_CHP_2_SECT_6.html">this</a> handy blog post points out, if you want to see how Rails <em>would</em> pluralize a word, just run a generator command with the <code>--pretend</code> or <code>-p</code> option:</p>

<p><img src="https://31.media.tumblr.com/5de321ac423d0c7b39be8bacf15dcce6/tumblr_inline_n9icpdrYV71si9gc8.png" alt="image" /></p>

<p>This prints out a list of all the files Rails would create if you ran a generator command without the option. This is also useful if you forget the difference between scaffolds and resources.</p>

<p>Convention is part of what makes Rails so powerful. The framework can anticipate what you need and generate your file structure for you&ndash; but at the end of the day, rules were meant to be broken. You can turn off pluralization completely by adding this line of code to your config/environment.rb file:</p>

<pre>ActiveRecord::Base.pluralize_table_names = false</pre>


<p>But keep in mind that your whole project will break.</p>

<p>You can also experiment with existing conventions by testing pluralization patterns in your Rails console. Use the <code>pluralize</code> and <code>singularize</code> methods:</p>

<p><img src="https://31.media.tumblr.com/ecd1066dfe6cc67eaeb37f1396053f36/tumblr_inline_n9idb92Vff1si9gc8.png" alt="image" /></p>

<p>Where do these methods come from? Glad you asked! Rails depends on a gem called <a href="http://api.rubyonrails.org/">ActiveSupport</a> that provides string pluralization patterns (and MANY other things.) Many of the files in the &ldquo;<a href="http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html">inflector</a>&rdquo; directory deal specifically with how and when to pluralize words.</p>

<p>If you love reading source code, the <a href="https://github.com/rails/rails/blob/36019329b015e570a58d9f34027c6e73edc36b77/activesupport/lib/active_support/inflector/methods.rb">inflector/methods.rb</a> and <a href="https://github.com/rails/rails/blob/aa0e1fac3e2988710f799795eaae2a06202540c6/activesupport/lib/active_support/core_ext/string/inflections.rb">string/inflections.rb</a> files use higher-level methods like <code>tableize</code>, which depends on the lower-level methods like <code>plural</code> and <code>singular</code> in the <a href="https://github.com/rails/rails/blob/efff6c1fd4b9e2e4c9f705a45879373cb34a5b0e/activesupport/lib/active_support/inflector/inflections.rb">inflector/inflections.rb</a> file. <strong>The rules are defined in the first place in the lowest-level file, <a href="https://github.com/rails/rails/blob/92f567ab30f240a1de152061a6eee76ca6c4da86/activesupport/lib/active_support/inflections.rb">active_support/inflections.rb</a>.</strong> It handles both normal and irregular patterns.</p>

<p><img src="https://31.media.tumblr.com/d04b350306707a1627bb69594ee39adc/tumblr_inline_n9if77EKRY1si9gc8.jpg" alt="image" /></p>

<p>The <a href="http://underpop.free.fr/r/ruby-on-rails/cookbook/I_0596527314_CHP_2_SECT_6.html">Ruby on Rails Cookbook</a> explains how to override the rules provided in the <a href="http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html">inflector</a> files:</p>

<pre>_`$ ruby script/console
>> "foo".pluralize
=> "foos"`

Rails calls words that are the same in both plural and singular form uncountable. To add the word foo to a list of all uncountable words, add the following to the bottom of environment.rb:

config/environment.rb:

`...
Inflector.inflections do |inflect|
 inflect.uncountable "foo"
end`

Reload script/console, pluralize foo again, and you'll find that your new inflection rule has been correctly applied.

`$ ruby script/console
>> "foo".pluralize
=> "foo"`

Other inflection rules can be added to the block passed to Inflector.inflections. Here are a few examples:

`Inflector.inflections do |inflect|
 inflect.plural /^(ox)$/i, '\1\2en'
 inflect.singular /^(ox)en/i, '\1'
 inflect.irregular 'octopus', 'octopi'
 inflect.uncountable "equipment"
end`

These rules are applied before the rules defined in inflections.rb. _</pre>


<pre>_Because of this, you can override existing rules defined by the framework._</pre>


<p>So there you have it, fellow grammar enthusiasts. The Rubyists who came before us took the time to painstakingly define pluralization rules in <a href="https://github.com/rails/rails/blob/92f567ab30f240a1de152061a6eee76ca6c4da86/activesupport/lib/active_support/inflections.rb">this</a> file. You can override them if you&rsquo;d like. In fact, you might <em>have</em> to override them if your models are made-up or non-English words.</p>

<p><img src="https://31.media.tumblr.com/bbe7cd18619444794e45c490042d8cce/tumblr_inline_n9ifetNwqO1si9gc8.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baby's First Hackathon]]></title>
    <link href="http://ilanasufrin.github.io/blog/2014/08/31/babys-first-hackathon/"/>
    <updated>2014-08-31T16:18:17-04:00</updated>
    <id>http://ilanasufrin.github.io/blog/2014/08/31/babys-first-hackathon</id>
    <content type="html"><![CDATA[<p>Over the weekend, I competed in my very first hackathon. <span>It was run by<span class="Apple-converted-space">&nbsp;</span></span><a href="http://www.ideo.com/">IDEO</a><span>, and the theme was waste and surplus in NYC:</span></p>

<p><a href="http://www.ideo.com/hackathon/nyc/">http://www.ideo.com/hackathon/nyc/</a></p>

<p>I just want to reflect on my experience here since the hackathon was very different than I was expecting.</p>

<p>&hellip;</p>

<p>My friend Wenting is a UX designer at Viacom and my friend Jesse is a professional Rails developer, so they&rsquo;re both way more experienced than me. We agreed that I would &ldquo;help&rdquo; Jesse but he would do the heavy lifting of architecting the backend. Wenting had already thought of an idea and briefed us on it before we arrived at IDEO.</p>

<p>When we got to the venue near Canal Street, we were surprised to discover that almost nobody was a developer, and almost nobody had a ready-made team. Furthermore, the hackathon was scheduled to be very short: it was only Friday and Saturday as opposed to lasting the entire weekend.
I have a feeling that IDEO didn&rsquo;t really know how to run a hackathon.</p>

<p>Most people got to work finding a team, but since I came with my friends we could get to work right away. We ended up picking up a fourth teammate, Hao, who is an amazing biv/dev guy and probably is the reason we were so successful.</p>

<p>Hao did market research on our competitors while we started programming. Wenting sat apart from us and built the frontend while Jesse and I brainstormed what our models and migrations should look like. The lack of communication turned out to be a huge problem later because Wenting built a single-page app that couldn&rsquo;t be connected to our multi-page backend. We coded late into the night, went home for a few hours, and came back to IDEO at 9am the next morning.</p>

<hr />

<p>On Saturday, Wenting arrived and told us that she had decided not to do photoshop mockups because there wasn&rsquo;t time. She was just going to build what she saw in her head. I was a little nervous but agreed that we didn&rsquo;t have time to build the app the usual way.</p>

<p>I was inordinately proud of myself a couple hours later when Jesse told me that form_for confused him so he always hard-coded the html in his forms. I insisted that we use form_for, and together we figured it out. Win for Flatiron!</p>

<hr />

<p>Jesse and I inevitably ran out of time, so our app was barely functional. It was time to upload our slides, but we had almost nothing working. It could only do three things: authenticate with Google, calculate who&rsquo;s closest to you (the meat of the app), and send text messages (thank you, Twilio!)</p>

<hr />

<p>Hao advised us that since we didn&rsquo;t have anything to actually <em>show</em> the audience, we shouldn&rsquo;t present any tech at all. We just let him talk about how awesome the app is, and then I took questions about our plans for expansion. And we ended up taking 3rd place out of 12!</p>

<p><span>As far as I can tell, there are no press releases announcing the winners. But it&rsquo;s all over my<span class="Apple-converted-space">&nbsp;</span></span><a href="https://twitter.com/IlanaSufrin">twitter</a><span>.</span></p>

<p><span>I wrote a short description of our app, in case anyone is interested.</p>

<p></span></p>

<blockquote><p><div>Free Stuff Fairy is a web/mobile app that connects unwanted goods&ndash;potential waste&ndash;with people who need them. It encourages the reuse of goods in New York City by making the exchange fun and easy. It dynamically generates peer-to-peer offers using a distance-based algorithm. The closest users have the first opportunities to claim an offer. Once a match has been made, Free Stuff Fairy sends a text message (through the Twilio API) to let the recipient know that they&rsquo;ve been chosen for a certain item. They can then accept or reject the offer within the given time limit.
&nbsp;</div></p></blockquote>

<p><span><span class="Apple-converted-space"></span></span></p>

<p> My favorite code from the weekend was Jesse&rsquo;s distance algorithm:</p>

<pre>class Matcher
  DELTA = 0.003

  def self.match_user_to_available_item(user)
    lat = user.latitude
    lng = user.longitude
    item = Item.available
      .where('latitude BETWEEN ? AND ?', lat-DELTA, lat+DELTA)
      .where('longitude BETWEEN ? AND ?', lng-DELTA, lng+DELTA)
      .first
    if item
      item.update(status: :unavailable)
      item.offers.create!(owner_id: item.user_id, recipient_id: user.id)
    end
  end

  def self.match_item_to_available_user(item)
    lat = item.latitude
    lng = item.longitude
    user = User.where('latitude BETWEEN ? AND ?', lat-DELTA, lat+DELTA)
      .where('longitude BETWEEN ? AND ?', lng-DELTA, lng+DELTA)
      .without_offer
      .first
    if user
      offer = item.offers.create!(owner_id: item.user_id, recipient: user)
      item.update(status: :unavailable)
      offer
    end
  end
end</pre>


<p><span></p>

<p>Our<span class="Apple-converted-space">&nbsp;</span></span><a href="http://fennel-loves-you-too.herokuapp.com/">product</a><span><span class="Apple-converted-space">&nbsp;</span>is definitely<span class="Apple-converted-space">&nbsp;</span></span><strong>NOT</strong><span><span class="Apple-converted-space">&nbsp;</span>functional yet but we have a plan to meet every night and finish it before BigApps.</span></p>

<p><span>&mdash;</p>

<p>FINAL THOUGHTS:</p>

<p>I would really not advise that anybody go to a hackathon until we&rsquo;re a bit more experienced. My friends agreed that I could approach this one as a student, and I definitely don&rsquo;t think I was slowing Jesse down (if anything I was helping him debug his code by asking a million questions), but I wish I had more to contribute to my team.
Also, sleep deprivation.</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Take Web Scraping Further with Mechanize]]></title>
    <link href="http://ilanasufrin.github.io/blog/2014/08/31/take-web-scraping-further-with-mechanize/"/>
    <updated>2014-08-31T16:09:57-04:00</updated>
    <id>http://ilanasufrin.github.io/blog/2014/08/31/take-web-scraping-further-with-mechanize</id>
    <content type="html"><![CDATA[<p>Recently, the class learned how to use Nokogiri to scrape webpages. A quick Google search reveals that this is indeed the most popular web scraping gem. But many people combine Nokogiri with another gem, <a href="https://rubygems.org/gems/mechanize">Mechanize</a>, to extend its functionality by automating some of the work of clicking the &ldquo;next&rdquo; button or creating profiles. This post is a quick writeup of my experiences with Mechanize. Please note that I ended up using Mechanize&nbsp;<em>instead</em> of Nokogiri, not in conjunction with it. This made parsing my html way more complicated than it had to be.</p>

<p>I followed a few different tutorials to do it, including&nbsp;<a href="http://www.icicletech.com/blog/web-scraping-with-ruby-using-mechanize-and-nokogiri-gems">this</a>&nbsp;and <a href="http://readysteadycode.com/howto-scrape-websites-with-ruby-and-mechanize">this</a>.</p>

<p>I created an example file, <code>"mechanize_example.rb"</code>, to run from the command line. The ReadySteadyCode tutorial provides the following code snippet for getting a random wikipedia article and printing it to the terminal:</p>

<pre>require 'mechanize'

mechanize = Mechanize.new

page = mechanize.get('http://en.wikipedia.org/wiki/Main_Page')

link = page.link_with(text: 'Random article')

page = link.click

puts page.uri

</pre>


<blockquote><p><span>The #link_with method is provided by mechanize, and makes it easy to pull out the random article link. The #click method instructs mechanize to follow the link, and the #uri method returns the address of the page. Notice that mechanize follows redirects automatically, so this example makes three HTTP requests in&nbsp;total.</span></p></blockquote>

<p>I decided to see how far I could take this example by modifying the code to generate interesting data from other websites with &ldquo;random&rdquo; functions.</p>

<p>First, a simple change. I swapped out Wikipedia&rsquo;s info for Reddit&rsquo;s (I spend entirely too much time on Reddit anyway.) I was able to print random subreddits to my command line.</p>

<pre><code>require 'mechanize'

mechanize = Mechanize.new

page = mechanize.get('http://www.reddit.com/')

link = page.link_with(text: 'random subreddit')

page = link.click

puts page.uri
</code></pre>

<p>This code yields such glorious random subreddits as&nbsp;<a href="http://www.reddit.com/r/CrossStitch/">http://www.reddit.com/r/CrossStitch/</a> and&nbsp;<a href="http://www.reddit.com/r/AntiAntiJokes/.">http://www.reddit.com/r/AntiAntiJokes/.</a></p>

<p>But what else could I do besides print random urls to the command line? Could I also use it to give me the title of the top link on each page? Hint: yes.</p>

<pre>require 'mechanize'

mechanize = Mechanize.new

page = mechanize.get('http://www.reddit.com/')

link = page.link_with(text: 'random subreddit')

page = link.click

first_link = page.search '/html/body/div/div/div/div/p/a'

puts page.uri
puts first_link.first.text.strip
</pre>


<p>Here&rsquo;s where not using Nokogiri came back to haunt me: look at how complicated parsing the html had become. I was also getting error messages whenever the subreddit was empty (that means it contains no links.) But my command line printouts now magically included results like:</p>

<p><code>http://www.reddit.com/r/cincinnati/
 Just framed this 1902 map up for my dad</code></p>

<p>and</p>

<p><code>http://www.reddit.com/r/Images/
 Returned to my friends car to find this letter from 7 year old Justin</code></p>

<p>This idea can be taken so much further! I plan to extend it in the future by taking to the web and creating a game where people can vote on randomly generated subreddits that are pitted against each other. We&rsquo;ll see which ones are the most popular by name alone.</p>

<p>I might also be able to use Mechanize to create a reddit bot that responds to regular expressions, but we&rsquo;ll leave that for a theoretical time in the future when I understand regular expressions.</p>

<p><strong>Edit:</strong></p>

<p>Due to popular demand, I&rsquo;ve turned the subreddit generator into a gem! See:
<a href="https://rubygems.org/gems/subreddit">https://rubygems.org/gems/subreddit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Map vs Collect, and Other Ruby Synonyms]]></title>
    <link href="http://ilanasufrin.github.io/blog/2014/08/31/map-vs-collect/"/>
    <updated>2014-08-31T16:03:49-04:00</updated>
    <id>http://ilanasufrin.github.io/blog/2014/08/31/map-vs-collect</id>
    <content type="html"><![CDATA[<p>Ruby has a ton of high-level iterators. So how are you supposed to know which one to use when? More specifically, what&rsquo;s the difference between <code>map</code> and <code>collect</code>? They each produce a new array&nbsp;containing the results of the block applied to each element of the receiver. Both <code>map!</code> and <code>collect!</code> are offered to modify the array in place.</p>

<p>Some sources assert that the two methods are <a href="http://rubyinrails.com/2014/01/ruby-difference-between-collect-and-map/">the same</a>. Both are array methods that can work with anything that is <a href="http://ruby-doc.org/core-2.1.2/Enumerable.htm">Enumerable</a>. Ruby is written in C, and the C-level implementation is identical. Here is that implementation:</p>

<p><img src="https://31.media.tumblr.com/58cacab14980d9cb6fcdf6a4fc410c2f/tumblr_inline_n7ba2wiZs51si9gc8.png" alt="image" /></p>

<p>But then why have both?&nbsp;</p>

<p>Wikipedia <a href="http://en.wikipedia.org/wiki/Map_%28higher-order_function%29">explains</a> that Ruby provides both to make programmers feel more comfortable. <code>Map</code> is provided by many programming languages, and <code>collect</code> came from a language called <a href="http://en.wikipedia.org/wiki/Smalltalk">Smalltalk</a>.&nbsp;</p>

<p>Other Ruby synonyms include the shovel operator <code>&lt;&lt;</code> and <code>concat</code>. The shovel is different than <code>+=</code> because <code>+=</code> creates a new String in memory, but &lt;&lt; is faster because it j<a href="http://stackoverflow.com/questions/4684446/why-is-the-shovel-operator-preferred-over-plus-equals-when-building-a">ust modifies the original one</a>.&nbsp;</p>

<p>The for loop vs each appear to be synonyms but there is a scoping difference. The local variable used in for loops <a href="http://graysoftinc.com/early-steps/the-evils-of-the-for-loop">still exists after the loop</a>, which might have some unintended consequences for your program.</p>

<p><img src="https://31.media.tumblr.com/199f291ec2b4895473c8eab50733e141/tumblr_inline_n7bb4tg2Kn1si9gc8.png" alt="image" /></p>

<p>On a different note, <code>.size</code> is an alias for <code>.length</code>. But <code>count</code>, which seems similar, <a href="http://stackoverflow.com/questions/4550770/count-size-length-too-many-choices-in-ruby">is actually different</a>.&nbsp;</p>

<p><img src="https://31.media.tumblr.com/ac5d9a927e601ecc93cb2b432d578819/tumblr_inline_n7bf5o2LtP1si9gc8.png" alt="image" /></p>

<p>When the inventor of Ruby, Matz himself, was <a href="http://www.artima.com/intv/rubyP.html">asked to explain</a> why he provides so many ways to do the same thing, he said:</p>

<blockquote><p><span>Ruby inherited the Perl philosophy of having more than one way to do the same thing. I inherited that philosophy from Larry Wall, who is my hero actually. I want to make Ruby users free. I want to give them the freedom to choose. People are different. People choose different criteria. But if there is a better way among many alternatives, I want to encourage that way by making it comfortable. So that&rsquo;s what I&rsquo;ve tried to do. Maybe Python code is a bit more readable. Everyone can write the same style of Python code, so it can be easier to read, maybe. But the difference from one person to the next is so big, providing only one way is little help even if you&rsquo;re using Python, I think. I&rsquo;d rather provide many ways if it&rsquo;s possible, but encourage or guide users to choose a better way if it&rsquo;s possible.</span></p></blockquote>

<p>So that&rsquo;s the answer. When presented with two or three or twelve different ways to do the same thing in Ruby, you should choose whichever way makes you the most comfortable.</p>
]]></content>
  </entry>
  
</feed>
